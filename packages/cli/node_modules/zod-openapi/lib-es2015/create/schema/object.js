import { createComponentSchemaRef } from '../components';
import { createSchemaOrRef } from '.';
export const createObjectSchema = (zodObject, state) => {
    if (zodObject._def.extendMetadata?.extendsRef) {
        return createExtendedSchema(zodObject, zodObject._def.extendMetadata.extends, zodObject._def.extendMetadata.extendsRef, state);
    }
    return createObjectSchemaFromShape(zodObject.shape, zodObject._def.unknownKeys === 'strict', state);
};
export const createExtendedSchema = (zodObject, baseZodObject, schemaRef, state) => {
    const diffShape = createShapeDiff(baseZodObject._def.shape(), zodObject._def.shape());
    return {
        allOf: [
            { $ref: createComponentSchemaRef(schemaRef) },
            createObjectSchemaFromShape(diffShape, false, state),
        ],
    };
};
const createShapeDiff = (baseObj, extendedObj) => Object.entries(extendedObj).reduce((acc, [key, val]) => {
    if (val !== baseObj[key]) {
        acc[key] = extendedObj[key];
    }
    return acc;
}, {});
export const createObjectSchemaFromShape = (shape, strict, state) => ({
    type: 'object',
    properties: mapProperties(shape, state),
    required: mapRequired(shape),
    ...(strict && { additionalProperties: false }),
});
export const mapRequired = (shape) => {
    const required = Object.entries(shape)
        .filter(([_key, zodSchema]) => !zodSchema.isOptional())
        .map(([key]) => key);
    if (!required.length) {
        return undefined;
    }
    return required;
};
export const mapProperties = (shape, state) => Object.entries(shape).reduce((acc, [key, zodSchema]) => {
    acc[key] = createSchemaOrRef(zodSchema, state);
    return acc;
}, {});
//# sourceMappingURL=object.js.map