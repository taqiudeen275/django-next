"use strict";
"use client";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/ReactQueryStreamedHydration.tsx
var ReactQueryStreamedHydration_exports = {};
__export(ReactQueryStreamedHydration_exports, {
  ReactQueryStreamedHydration: () => ReactQueryStreamedHydration
});
module.exports = __toCommonJS(ReactQueryStreamedHydration_exports);
var import_react_query = require("@tanstack/react-query");
var React = __toESM(require("react"), 1);
var import_HydrationStreamProvider = require("./HydrationStreamProvider.cjs");
var import_jsx_runtime = require("react/jsx-runtime");
var stream = (0, import_HydrationStreamProvider.createHydrationStreamProvider)();
function ReactQueryStreamedHydration(props) {
  const queryClient = (0, import_react_query.useQueryClient)(props.queryClient);
  const [trackedKeys] = React.useState(() => /* @__PURE__ */ new Set());
  if (import_react_query.isServer) {
    queryClient.getQueryCache().subscribe((event) => {
      switch (event.type) {
        case "added":
        case "updated":
          trackedKeys.add(event.query.queryHash);
      }
    });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    stream.Provider,
    {
      onFlush: () => {
        const shouldDehydrate = props.options?.dehydrate?.shouldDehydrateQuery ?? import_react_query.defaultShouldDehydrateQuery;
        const dehydratedState = (0, import_react_query.dehydrate)(queryClient, {
          ...props.options?.dehydrate,
          shouldDehydrateQuery(query) {
            return trackedKeys.has(query.queryHash) && shouldDehydrate(query);
          }
        });
        trackedKeys.clear();
        if (!dehydratedState.queries.length) {
          return [];
        }
        return [dehydratedState];
      },
      onEntries: (entries) => {
        for (const hydratedState of entries) {
          (0, import_react_query.hydrate)(queryClient, hydratedState, props.options?.hydrate);
        }
      },
      transformer: props.transformer,
      nonce: props.nonce,
      children: props.children
    }
  );
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ReactQueryStreamedHydration
});
//# sourceMappingURL=ReactQueryStreamedHydration.cjs.map