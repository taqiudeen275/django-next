"use strict";
"use client";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/HydrationStreamProvider.tsx
var HydrationStreamProvider_exports = {};
__export(HydrationStreamProvider_exports, {
  createHydrationStreamProvider: () => createHydrationStreamProvider
});
module.exports = __toCommonJS(HydrationStreamProvider_exports);
var import_react_query = require("@tanstack/react-query");
var import_navigation = require("next/navigation");
var React = __toESM(require("react"), 1);
var import_htmlescape = require("./htmlescape.cjs");
var import_jsx_runtime = require("react/jsx-runtime");
var serializedSymbol = Symbol("serialized");
function createHydrationStreamProvider() {
  const context = React.createContext(
    null
  );
  function UseClientHydrationStreamProvider(props) {
    var _a;
    const id = `__RQ${React.useId()}`;
    const idJSON = (0, import_htmlescape.htmlEscapeJsonString)(JSON.stringify(id));
    const [transformer] = React.useState(
      () => props.transformer ?? {
        // noop
        serialize: (obj) => obj,
        deserialize: (obj) => obj
      }
    );
    const [stream] = React.useState(() => {
      if (!import_react_query.isServer) {
        return {
          push() {
          }
        };
      }
      return [];
    });
    const count = React.useRef(0);
    (0, import_navigation.useServerInsertedHTML)(() => {
      var _a2;
      stream.push(...((_a2 = props.onFlush) == null ? void 0 : _a2.call(props)) ?? []);
      if (!stream.length) {
        return null;
      }
      const serializedCacheArgs = stream.map((entry) => transformer.serialize(entry)).map((entry) => JSON.stringify(entry)).join(",");
      stream.length = 0;
      const html = [
        `window[${idJSON}] = window[${idJSON}] || [];`,
        `window[${idJSON}].push(${(0, import_htmlescape.htmlEscapeJsonString)(serializedCacheArgs)});`
      ];
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        "script",
        {
          nonce: props.nonce,
          dangerouslySetInnerHTML: {
            __html: html.join("")
          }
        },
        count.current++
      );
    });
    if (!import_react_query.isServer) {
      const win = window;
      if (!((_a = win[id]) == null ? void 0 : _a.initialized)) {
        const onEntries = (...serializedEntries) => {
          const entries = serializedEntries.map(
            (serialized) => transformer.deserialize(serialized)
          );
          props.onEntries(entries);
        };
        const winStream = win[id] ?? [];
        onEntries(...winStream);
        win[id] = {
          initialized: true,
          push: onEntries
        };
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(context.Provider, { value: { stream, id }, children: props.children });
  }
  return {
    Provider: UseClientHydrationStreamProvider,
    context
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createHydrationStreamProvider
});
//# sourceMappingURL=HydrationStreamProvider.cjs.map